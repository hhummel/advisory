{"version":3,"sources":["logo.svg","App.js","components/TextInput.js","components/LoginForm.js","reducers/auth.js","reducers/index.js","actions/auth.js","containers/Login.js","containers/PrivateRoute.js","serviceWorker.js","index.js","store.js"],"names":["module","exports","__webpack_require__","p","App","react_default","a","createElement","className","src","logo","alt","href","target","rel","Component","TextInput","_ref","name","label","error","type","rest","Object","objectWithoutProperties","id","concat","input_type","reactstrap_es","color","htmlFor","assign","LoginForm","state","username","password","handleInputChange","event","value","checked","_this","setState","defineProperty","onSubmit","preventDefault","props","errors","this","non_field_errors","onChange","size","initialState","access","undefined","refresh","isRefreshTokenExpired","exp","Date","getTime","combineReducers","auth","arguments","length","action","objectSpread","token","payload","jwtDecode","response","statusText","router","routerReducer","isAuthenticated","fromAuth","connect","authErrors","dispatch","RSAA","endpoint","method","body","JSON","stringify","headers","Content-Type","types","login","Redirect","to","LoginForm_LoginForm","reducers","component","Route","render","pathname","from","location","Boolean","window","hostname","match","history","createHistory","store","persistedFilter","createFilter","reducer","persistReducer","key","storage","whitelist","transforms","rootReducer","createStore","applyMiddleware","apiMiddleware","routerMiddleware","persistStore","configureStore","ReactDOM","react_redux_es","es","Switch","exact","path","Login","containers_PrivateRoute","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e3a45d8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react'\nimport { FormGroup, FormFeedback, Label, Input } from 'reactstrap';\n\nexport default ({name, label, error, type, ...rest}) => {\n  const id = `id_${name}`,\n        input_type = type?type:\"text\"\n  return (\n    <FormGroup color={error?\"danger\":\"\"}>\n      {label?<Label htmlFor={id}>{label}</Label>: \"\"}\n      <Input type={input_type} name={name} \n             id={id} className={error?\"is-invalid\":\"\"}\n             {...rest} />\n      {error?\n         <FormFeedback className=\"invalid-feedback\">\n           {error}\n         </FormFeedback>\n         : \"\"\n      }\n    </FormGroup>\n  )\n}\n","import React, {Component} from 'react'\nimport { Alert, Button, Jumbotron,  Form } from 'reactstrap';\n\nimport TextInput from './TextInput'\n\nexport default class LoginForm extends Component {\n  state = {\n    username: '',\n    password: ''\n  }\n\n  handleInputChange = (event) => {\n    const target = event.target,\n          value = target.type === \n            'checkbox' ? target.checked : target.value,\n          name = target.name\n    this.setState({\n      [name]: value\n    });\n  }\n  onSubmit = (event) => {\n    event.preventDefault()\n    this.props.onSubmit(this.state.username, this.state.password)\n  }\n  render() {\n    const errors = this.props.errors || {}\n    return (\n      <Jumbotron className=\"container\">\n        <Form onSubmit={this.onSubmit}>\n          <h1>Authentication</h1>\n          {\n           errors.non_field_errors?\n             <Alert color=\"danger\">\n                {errors.non_field_errors}\n             </Alert>:\"\"\n          }\n          <TextInput name=\"username\" label=\"Username\" error={errors.username} onChange={this.handleInputChange}/>\n          <TextInput name=\"password\" label=\"Password\" error={errors.password} type=\"password\" onChange={this.handleInputChange}/>\n          <Button type=\"submit\" color=\"primary\" size=\"lg\">\n            Log In\n          </Button>\n        </Form>\n      </Jumbotron>\n    )\n  }\n}\n","import jwtDecode from 'jwt-decode'\nimport * as auth from '../actions/auth'\nconst initialState = {\n  access: undefined,\n  refresh: undefined,\n  errors: {},\n}\n\nexport default (state=initialState, action) => {\n  switch(action.type) {\n    case auth.LOGIN_SUCCESS:\n      return {\n        access: {\n          token: action.payload.access,\n          ...jwtDecode(action.payload.access)\n        },\n        refresh: {\n          token: action.payload.refresh,\n          ...jwtDecode(action.payload.refresh)\n        },\n        errors: {}\n    }\n    case auth.TOKEN_RECEIVED:\n      return {\n        ...state,\n        access: {\n          token: action.payload.access,\n          ...jwtDecode(action.payload.access)\n        }\n      }\n    case auth.LOGIN_FAILURE:\n    case auth.TOKEN_FAILURE:\n      return {\n         access: undefined,\n         refresh: undefined,\n         errors: \n             action.payload.response || \n                {'non_field_errors': action.payload.statusText},\n      }\n    default:\n      return state\n    }\n}\n\nexport function accessToken(state) {\n    if (state.access) {\n        return  state.access.token\n    }\n}\n    \nexport function refreshToken(state) {\n    if (state.refresh) {\n        return  state.refresh.token\n    }\n}\n    \nexport function isAccessTokenExpired(state) {\n  if (state.access && state.access.exp) {\n    return 1000 * state.access.exp - (new Date()).getTime() < 5000\n  }\n  return true\n}\nexport function isRefreshTokenExpired(state) {\n  if (state.refresh && state.refresh.exp) {\n    return 1000 * state.refresh.exp - (new Date()).getTime() < 5000\n  }\n  return true\n}\nexport function isAuthenticated(state) {\n  return !isRefreshTokenExpired(state)\n}\nexport function errors(state) {\n   return  state.errors\n}\n","import { combineReducers } from 'redux'\nimport { routerReducer } from 'react-router-redux'\nimport auth, * as fromAuth from './auth.js'\n\nexport default combineReducers({\n  auth: auth,\n  router: routerReducer\n})\n\nexport const isAuthenticated =\n state => fromAuth.isAuthenticated(state.auth)\nexport const accessToken = \n  state => fromAuth.accessToken(state.auth)\nexport const isAccessTokenExpired =\n  state => fromAuth.isAccessTokenExpired(state.auth)\nexport const refreshToken =\n  state => fromAuth.refreshToken(state.auth)\nexport const isRefreshTokenExpired =\n  state => fromAuth.isRefreshTokenExpired(state.auth)\nexport const authErrors =\n  state => fromAuth.errors(state.auth)\n","import { RSAA } from 'redux-api-middleware';\nexport const LOGIN_REQUEST = '@@auth/LOGIN_REQUEST';\nexport const LOGIN_SUCCESS = '@@auth/LOGIN_SUCCESS';\nexport const LOGIN_FAILURE = '@@auth/LOGIN_FAILURE';\nexport const TOKEN_REQUEST = '@@auth/TOKEN_REQUEST';\nexport const TOKEN_RECEIVED = '@@auth/TOKEN_RECEIVED';\nexport const TOKEN_FAILURE = '@@auth/TOKEN_FAILURE';\n\nexport const login = (username, password) => ({\n  [RSAA]: {\n    endpoint: '/api/auth/token/obtain/',\n    method: 'POST',\n    body: JSON.stringify({username, password}),\n    headers: { 'Content-Type': 'application/json' },\n    types: [\n      LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE\n    ]\n  }\n})\n\nexport const refreshAccessToken = (token) => ({\n  [RSAA]: {\n    endpoint: '/api/auth/token/refresh/',\n    method: 'POST',\n    body: JSON.stringify({refresh: token}),\n    headers: { 'Content-Type': 'application/json' },\n    types: [\n      TOKEN_REQUEST, TOKEN_RECEIVED, TOKEN_FAILURE\n    ]\n  }\n})\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Redirect } from 'react-router'\nimport LoginForm from '../components/LoginForm'\nimport {login} from  '../actions/auth'\nimport {authErrors, isAuthenticated} from '../reducers'\n\nconst Login = (props) => {\n  if(props.isAuthenticated) {\n    return <Redirect to='/' />\n  }\n\n  return (\n    <div className=\"login-page\">\n      <LoginForm {...props}/>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  errors: authErrors(state),\n  isAuthenticated: isAuthenticated(state)\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSubmit: (username, password) => {\n    dispatch(login(username, password))\n  }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React from 'react'\nimport { Route, Redirect } from 'react-router'\nimport { connect } from 'react-redux'\nimport * as reducers from '../reducers'\n\nconst PrivateRoute = ({ component: Component, isAuthenticated, ...rest }) => (\n  <Route {...rest} render={props => (\n    isAuthenticated ? (\n      <Component {...props}/>\n    ) : (\n      <Redirect to={{\n        pathname: '/login',\n        state: { from: props.location }\n      }}/>\n    )\n  )}/>\n)\n\nconst mapStateToProps = (state) => ({\n  isAuthenticated: reducers.isAuthenticated(state)\n})\n\nexport default connect(mapStateToProps, null)(PrivateRoute);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport createHistory from 'history/createBrowserHistory'\nimport { ConnectedRouter } from 'react-router-redux'\nimport { Provider } from 'react-redux'\nimport {Route, Switch} from 'react-router'\n\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport Login from './containers/Login';\nimport PrivateRoute from './containers/PrivateRoute';\n\nimport configureStore from './store'\nimport * as serviceWorker from './serviceWorker';\n\nconst history = createHistory()\nconst store = configureStore(history)\n\nReactDOM.render((\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <Switch>\n        <Route exact path=\"/login/\" component={Login} />\n        <PrivateRoute path=\"/\" component={App}/>\n      </Switch>\n    </ConnectedRouter>\n  </Provider>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import storage from 'redux-persist/es/storage'\nimport { apiMiddleware } from 'redux-api-middleware';\nimport { applyMiddleware, createStore } from 'redux'\nimport { createFilter   } from 'redux-persist-transform-filter';\nimport { persistReducer, persistStore } from 'redux-persist'\nimport { routerMiddleware } from 'react-router-redux'\nimport rootReducer from './reducers'\nexport default (history) => {\n  const persistedFilter = createFilter(\n    'auth', ['access', 'refresh']);\n  const reducer = persistReducer(\n    {\n      key: 'polls',\n      storage: storage,\n      whitelist: ['auth'],\n      transforms: [persistedFilter]\n    },\n    rootReducer)\n  const store = createStore(\n    reducer, {},\n    applyMiddleware(\n      apiMiddleware, \n      routerMiddleware(history))\n  )\n  persistStore(store)\n  return store\n}\n"],"sourceRoot":""}